{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class CartService {\n  constructor(router) {\n    this.router = router;\n    this.items = [];\n    this.cartItemsSubject = new BehaviorSubject([]);\n    this.cartItems$ = this.cartItemsSubject.asObservable();\n    this.cartItems = [];\n    this.storageKey = 'cartItems';\n    const cartData = localStorage.getItem('cart');\n    const storedItems = localStorage.getItem(this.storageKey);\n    if (storedItems) {\n      this.cartItems = JSON.parse(storedItems);\n    }\n  }\n  getCartItems() {\n    return this.cartItems;\n  }\n  calculateTotalAmount() {\n    return this.cartItems.reduce((total, cartItem) => total + cartItem.price, 0);\n  }\n  // addToCart(item: CartItem): void {\n  //   const currentItems = this.cartItemsSubject.getValue();\n  //   const existingCartItem = currentItems.find(cartItem => cartItem.item.name === item.item.name);\n  //   if (existingCartItem) {\n  //     existingCartItem.quantity++; // Increase the quantity if the item already exists in the cart\n  //   } else {\n  //     currentItems.push(item);\n  //   }\n  //   this.cartItemsSubject.next(currentItems);\n  // }\n  addToCart(item) {\n    const currentItems = this.cartItemsSubject.getValue();\n    const existingCartItem = currentItems.find(cartItem => cartItem.item.name === item.item.name);\n    if (existingCartItem) {\n      existingCartItem.quantity++; // Increase the quantity if the item already exists in the cart\n    } else {\n      currentItems.push(item);\n    }\n    this.cartItems = currentItems;\n    this.cartItemsSubject.next(currentItems);\n    this.saveCartItems();\n  }\n  removeItem(item) {\n    const currentItems = this.cartItemsSubject.getValue();\n    const index = currentItems.findIndex(cartItem => cartItem.item.name === item.item.name);\n    if (index !== -1) {\n      currentItems.splice(index, 1);\n    }\n    this.cartItemsSubject.next(currentItems);\n  }\n  updateCartItem(item) {\n    const currentItems = this.cartItemsSubject.getValue();\n    const updatedItems = currentItems.map(cartItem => {\n      if (cartItem.item.name === item.item.name) {\n        return item;\n      } else {\n        return cartItem;\n      }\n    });\n    this.cartItemsSubject.next(updatedItems);\n  }\n  saveCartItems() {\n    localStorage.setItem(this.storageKey, JSON.stringify(this.cartItems));\n  }\n  clearCart() {\n    this.items = []; // Remove all items from the cart\n  }\n\n  submitPaymentForm() {\n    this.router.navigateByUrl('/payment');\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.Router));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","CartService","constructor","router","cartItemsSubject","asObservable","cartData","localStorage","getItem","storedItems","storageKey","cartItems","JSON","parse","getCartItems","calculateTotalAmount","reduce","total","cartItem","price","addToCart","item","currentItems","getValue","existingCartItem","find","name","quantity","push","next","saveCartItems","removeItem","index","findIndex","splice","updateCartItem","updatedItems","map","setItem","stringify","clearCart","items","submitPaymentForm","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\245260\\Desktop\\rest\\restaurantmod-master\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { MenuItem } from '../pages/menu/menu.component';\n// import { MenuItem } from './menu.component';\n\nexport interface CartItem {\n  item: MenuItem;  // Add the 'item' property\n  quantity: number;\n  price: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private items: any[] = [];\n  private cartItemsSubject: BehaviorSubject<CartItem[]> = new BehaviorSubject<CartItem[]>([]);\n  cartItems$ = this.cartItemsSubject.asObservable();\n  private cartItems: CartItem[] = [];\n  private storageKey = 'cartItems';\n  constructor(private router:Router) {  const cartData = localStorage.getItem('cart');\n  const storedItems = localStorage.getItem(this.storageKey);\n  if (storedItems) {\n    this.cartItems = JSON.parse(storedItems);\n  }}\n  getCartItems(): CartItem[] {\n    return this.cartItems;\n  }\n  calculateTotalAmount(): number {\n    return this.cartItems.reduce((total, cartItem) => total + cartItem.price, 0);\n  }\n \n  // addToCart(item: CartItem): void {\n  //   const currentItems = this.cartItemsSubject.getValue();\n  //   const existingCartItem = currentItems.find(cartItem => cartItem.item.name === item.item.name);\n  \n  //   if (existingCartItem) {\n  //     existingCartItem.quantity++; // Increase the quantity if the item already exists in the cart\n  //   } else {\n  //     currentItems.push(item);\n  //   }\n  \n  //   this.cartItemsSubject.next(currentItems);\n  // }\n  addToCart(item: CartItem): void {\n    const currentItems = this.cartItemsSubject.getValue();\n    const existingCartItem = currentItems.find(cartItem => cartItem.item.name === item.item.name);\n  \n    if (existingCartItem) {\n      existingCartItem.quantity++; // Increase the quantity if the item already exists in the cart\n    } else {\n      currentItems.push(item);\n    }\n  this.cartItems = currentItems;\n  this.cartItemsSubject.next(currentItems);\n  this.saveCartItems();\n}\n  \n  removeItem(item: CartItem): void {\n    const currentItems = this.cartItemsSubject.getValue();\n    const index = currentItems.findIndex(cartItem => cartItem.item.name === item.item.name);\n  \n    if (index !== -1) {\n      currentItems.splice(index, 1);\n    }\n  \n    this.cartItemsSubject.next(currentItems);\n  }\n  updateCartItem(item: CartItem): void {\n    const currentItems = this.cartItemsSubject.getValue();\n    const updatedItems = currentItems.map(cartItem => {\n      if (cartItem.item.name === item.item.name) {\n        return item;\n      } else {\n        return cartItem;\n      }\n    });\n    this.cartItemsSubject.next(updatedItems);\n  }\n\n  private saveCartItems(): void {\n    localStorage.setItem(this.storageKey, JSON.stringify(this.cartItems));\n  }\n  clearCart(): void {\n    this.items = []; // Remove all items from the cart\n  }\n  submitPaymentForm() {\n    this.router.navigateByUrl('/payment');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}